---
name: Policy Assignments

resources:
  pipelines:
  - pipeline: initiatives
    source: Initiative Definitions
    trigger: true

trigger: none

stages:
  - stage: build
    displayName: Build & Test
    jobs:
      - job: test
        displayName: Test
        variables:
          - template: ../../environments/build/vars.yml
        pool:
          vmImage: ${{ variables.vmImage }}
        steps:
          - task: PowerShell@2
            displayName: Run Pester Tests
            inputs:
              targetType: inline
              script: |
                Invoke-Pester -Path modules/policies/scripts/Test-Assignment.Tests.ps1, modules/policies/scripts/Test-AssignmentVars.Tests.ps1 -CI
              pwsh: true

          - task: PublishTestResults@2
            displayName: Publish Test Results
            inputs:
              testResultsFormat: NUnit
              testResultsFiles: "**/testResults.xml"
              failTaskOnFailedTests: true
              failTaskOnMissingResultsFile: true

      - job: canary
        displayName: Build Canary
        variables:
          - template: ../../environments/canary/vars.yml
        pool:
          vmImage: ${{ variables.vmImage }}
        steps:
          - task: AzureCLI@2
            displayName: Build Template
            inputs:
              azureSubscription: ${{ variables.azureConnection }}
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: |
                $managementGroupId = "${{ variables.managementGroupId }}"
                $managedIdentityId = "${{ variables.managedIdentityId }}"
                $logAnalyticsWorkspaceId = "${{ variables.logAnalyticsWorkspaceId }}"
                $assignmentsDirectory = "$(Build.SourcesDirectory)[\\/]modules[\\/]policies[\\/]assignments"
                $stagingDirectory = "$(Build.ArtifactStagingDirectory)/$managementGroupId"

                ./modules/policies/scripts/Build-AssignmentTemplate.ps1 -ManagementGroupId $managementGroupId -ManagedIdentityId $managedIdentityId -LogAnalyticsWorkspaceId $logAnalyticsWorkspaceId
                Get-ChildItem modules/policies/assignments -Filter main.bicep -Recurse | ForEach-Object {
                    $path = $PSItem.Directory.FullName -replace $assignmentsDirectory, $stagingDirectory
                    New-Item -Path $path -ItemType Directory -Force | Out-Null
                    az bicep build --file $PSItem.FullName --outfile "$path/main.json"
                }
              failOnStandardError: true

          - task: PublishPipelineArtifact@1
            displayName: Publish Artifacts
            inputs:
              targetPath: $(Build.ArtifactStagingDirectory)
              artifact: canary
              publishLocation: pipeline

      - job: prod
        displayName: Build Production
        variables:
          - template: ../../environments/prod/vars.yml
        pool:
          vmImage: ${{ variables.vmImage }}
        steps:
          - task: AzureCLI@2
            displayName: Build Template
            inputs:
              azureSubscription: ${{ variables.azureConnection }}
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: |
                $managementGroupId = "${{ variables.managementGroupId }}"
                $managedIdentityId = "${{ variables.managedIdentityId }}"
                $logAnalyticsWorkspaceId = "${{ variables.logAnalyticsWorkspaceId }}"
                $assignmentsDirectory = "$(Build.SourcesDirectory)[\\/]modules[\\/]policies[\\/]assignments"
                $stagingDirectory = "$(Build.ArtifactStagingDirectory)/$managementGroupId"

                ./modules/policies/scripts/Build-AssignmentTemplate.ps1 -ManagementGroupId $managementGroupId -ManagedIdentityId $managedIdentityId -LogAnalyticsWorkspaceId $logAnalyticsWorkspaceId
                Get-ChildItem modules/policies/assignments -Filter main.bicep -Recurse | ForEach-Object {
                    $path = $PSItem.Directory.FullName -replace $assignmentsDirectory, $stagingDirectory
                    New-Item -Path $path -ItemType Directory -Force | Out-Null
                    az bicep build --file $PSItem.FullName --outfile "$path/main.json"
                }
              failOnStandardError: true

          - task: PublishPipelineArtifact@1
            displayName: Publish Artifacts
            inputs:
              targetPath: $(Build.ArtifactStagingDirectory)
              artifact: prod
              publishLocation: pipeline

  - stage: validate
    displayName: Validate
    dependsOn: build
    jobs:
      - deployment: canary
        displayName: Canary
        condition: succeeded()
        variables:
          - template: ../../environments/canary/vars.yml
        pool:
          vmImage: ${{ variables.vmImage }}
        environment: Canary
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self

                - task: AzurePowerShell@5
                  displayName: Compare assignments
                  inputs:
                    azureSubscription: ${{ variables.azureConnection }}
                    ScriptType: InlineScript
                    Inline: |
                      $(Build.SourcesDirectory)/modules/policies/scripts/Compare-Assignment.ps1 -Prefix ${{ variables.managementGroupId }}
                    azurePowerShellVersion: LatestVersion
                    pwsh: true

                - ${{ each folder in split(variables.policyAssignmentFolders, ', ') }}:
                    - template: templates/management-group-deployment.yml
                      parameters:
                        displayName: Validate deployment in ${{ folder }}
                        deploymentName: assignments
                        command: validate
                        azureConnection: ${{ variables.azureConnection }}
                        location: ${{ variables.location }}
                        managementGroupId: ${{ replace(folder, '/', '-') }}
                        templateFile: $(Pipeline.Workspace)/canary/${{ folder }}/main.json

                    - template: templates/management-group-deployment.yml
                      parameters:
                        displayName: What-if deployment in ${{ folder }}
                        deploymentName: assignments
                        command: what-if
                        azureConnection: ${{ variables.azureConnection }}
                        location: ${{ variables.location }}
                        managementGroupId: ${{ replace(folder, '/', '-') }}
                        templateFile: $(Pipeline.Workspace)/canary/${{ folder }}/main.json

      - deployment: prod
        displayName: Production
        variables:
          - template: ../../environments/prod/vars.yml
        pool:
          vmImage: ${{ variables.vmImage }}
        environment: Production
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self

                - task: AzurePowerShell@5
                  displayName: Compare assignments
                  inputs:
                    azureSubscription: ${{ variables.azureConnection }}
                    ScriptType: InlineScript
                    Inline: |
                      $ErrorActionPreference = ("$(Build.SourceBranch)" -eq "refs/heads/main") ? "Stop" : "Continue"
                      $(Build.SourcesDirectory)/modules/policies/scripts/Compare-Assignment.ps1 -Prefix ${{ variables.managementGroupId }}
                    azurePowerShellVersion: LatestVersion
                    pwsh: true

                - ${{ each folder in split(variables.policyAssignmentFolders, ', ') }}:
                    - template: templates/management-group-deployment.yml
                      parameters:
                        displayName: Validate deployment in ${{ folder }}
                        deploymentName: assignments
                        command: validate
                        azureConnection: ${{ variables.azureConnection }}
                        location: ${{ variables.location }}
                        managementGroupId: ${{ replace(folder, '/', '-') }}
                        templateFile: $(Pipeline.Workspace)/prod/${{ folder }}/main.json

                    - template: templates/management-group-deployment.yml
                      parameters:
                        displayName: What-if deployment in ${{ folder }}
                        deploymentName: assignments
                        command: what-if
                        azureConnection: ${{ variables.azureConnection }}
                        location: ${{ variables.location }}
                        managementGroupId: ${{ replace(folder, '/', '-') }}
                        templateFile: $(Pipeline.Workspace)/prod/${{ folder }}/main.json

  - stage: deploy
    displayName: Deploy
    dependsOn: validate
    jobs:
      - deployment: canary
        displayName: Canary
        condition: succeeded()
        variables:
          - template: ../../environments/canary/vars.yml
        pool:
          vmImage: ${{ variables.vmImage }}
        environment: Canary
        strategy:
          runOnce:
            deploy:
              steps:
                - ${{ each folder in split(variables.policyAssignmentFolders, ', ') }}:
                    - template: templates/management-group-deployment.yml
                      parameters:
                        displayName: Deploy assignments in ${{ folder }}
                        deploymentName: assignments
                        command: create
                        azureConnection: ${{ variables.azureConnection }}
                        location: ${{ variables.location }}
                        managementGroupId: ${{ replace(folder, '/', '-') }}
                        templateFile: $(Pipeline.Workspace)/canary/${{ folder }}/main.json

      - deployment: prod
        displayName: Production
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
        variables:
          - template: ../../environments/prod/vars.yml
        pool:
          vmImage: ${{ variables.vmImage }}
        environment: Production
        strategy:
          runOnce:
            deploy:
              steps:
                - ${{ each folder in split(variables.policyAssignmentFolders, ', ') }}:
                    - template: templates/management-group-deployment.yml
                      parameters:
                        displayName: Deploy assignments in ${{ folder }}
                        deploymentName: assignments
                        command: create
                        azureConnection: ${{ variables.azureConnection }}
                        location: ${{ variables.location }}
                        managementGroupId: ${{ replace(folder, '/', '-') }}
                        templateFile: $(Pipeline.Workspace)/prod/${{ folder }}/main.json
...
